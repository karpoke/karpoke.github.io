<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Karpoke - Just another Pelican blog - tr</title><link>https://karpoke.ignaciocano.com/</link><description></description><lastBuildDate>Thu, 21 Jun 2012 21:03:00 +0200</lastBuildDate><item><title>hpHosts, evitando la navegación por dominios maliciosos</title><link>https://karpoke.ignaciocano.com/2012/06/21/hphosts-evitando-la-navegacion-por-dominios-maliciosos/</link><description>&lt;p&gt;Cuando navegamos por Internet, no somos conscientes de muchas de las
conexiones a diferentes dominios que se están llevando a cabo. Desde
páginas web que cargan o envían datos a otros dominios nada más
visitarlas, hasta casos de &lt;em&gt;phishing&lt;/em&gt; o conexiones realizadas por virus
o troyanos.&lt;/p&gt;
&lt;p&gt;hpHosts es un proyecto …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Thu, 21 Jun 2012 21:03:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2012-06-21:/2012/06/21/hphosts-evitando-la-navegacion-por-dominios-maliciosos/</guid><category>CRLF</category><category>dominios maliciosos</category><category>firma</category><category>gpg</category><category>hosts</category><category>pgp</category><category>phishing</category><category>scammer</category><category>spam</category><category>tee</category><category>tr</category></item><item><title>Descifrando al César en Bash</title><link>https://karpoke.ignaciocano.com/2011/02/16/descifrando-al-cesar-en-bash/</link><description>&lt;p&gt;Después de ver cómo se &lt;a href="https://karpoke.ignaciocano.com/2011/02/16/descifrando-al-cesar-en-python/" title="descifra al César en Python"&gt;descifra al César en Python&lt;/a&gt;, me he encontrado
con un par de maneras elegantes de hacerlo desde Bash.&lt;/p&gt;
&lt;h2&gt;Cifrado César&lt;/h2&gt;
&lt;p&gt;Con &lt;code&gt;tr&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo "lorem ipsum dolor sit amet" | tr 'a-z' 'd-za-c'
oruhp lsvxp groru vlw dphw
$ echo "oruhp lsvxp groru vlw dphw" | tr 'd-za-c' 'a-z' …&lt;/code&gt;&lt;/pre&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Wed, 16 Feb 2011 04:26:00 +0100</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-02-16:/2011/02/16/descifrando-al-cesar-en-bash/</guid><category>cifrado césar</category><category>rot13</category><category>rot47</category><category>sed</category><category>tr</category><category>bsdgames</category></item><item><title>Random Bash</title><link>https://karpoke.ignaciocano.com/2010/09/25/random-bash/</link><description>&lt;p&gt;&lt;cite&gt;"Los números aleatorios no deberían ser generados por un método
elegido aleatoriamente". &lt;em&gt;Donald E. Knuth&lt;/em&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;En Bash, podemos obtener números enteros &lt;a href="http://es.wikipedia.org/wiki/Aleatoriedad" title="aleatorios"&gt;aleatorios&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $RANDOM
20684
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="Random number" src="https://karpoke.ignaciocano.com/images/random_number-300x107.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Cada vez que se referencia el parámetro &lt;a href="http://linux.die.net/man/1/bash" title="RANDOM"&gt;RANDOM&lt;/a&gt;, éste devuelve un
valor entre 0 y 32767, es decir, 2^15^-1. Podemos inicializar la
secuencia …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Sat, 25 Sep 2010 00:54:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2010-09-25:/2010/09/25/random-bash/</guid><category>/dev/random</category><category>/dev/urandom</category><category>/proc/interrupts</category><category>aleatoriedad</category><category>contraseña aleatoria</category><category>dd</category><category>generar entropía</category><category>mac aleatoria</category><category>makepasswd</category><category>md5sum</category><category>mkpasswd</category><category>od</category><category>openssl</category><category>pwgen</category><category>rng-tools</category><category>sha1sum</category><category>sha224sum</category><category>sha256sum</category><category>sha384sum</category><category>sha512sum</category><category>shuf</category><category>strings</category><category>tr</category><category>xxd</category></item></channel></rss>