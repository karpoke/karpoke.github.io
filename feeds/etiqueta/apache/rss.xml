<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Karpoke - apache</title><link>https://karpoke.ignaciocano.com/</link><description></description><lastBuildDate>Sat, 15 Dec 2012 01:05:00 +0100</lastBuildDate><item><title>Subdominios dinámicos en un alojamiento con dominio dinámico en OVH</title><link>https://karpoke.ignaciocano.com/2012/12/15/subdominios-dinamicos-en-un-alojamiento-con-dominio-dinamico-en-ovh/</link><description>&lt;p&gt;Lo que se pretende es conseguir una manera rápida y sencilla de poner
sitios web &lt;em&gt;online&lt;/em&gt;. Una vez configurado el servidor web y el servidor
DNS, lo único que tendremos que hacer para tener accesible un nuevo
sitio web será colocarlo en un directorio concreto del servidor y
podremos acceder …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Sat, 15 Dec 2012 01:05:00 +0100</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2012-12-15:/2012/12/15/subdominios-dinamicos-en-un-alojamiento-con-dominio-dinamico-en-ovh/</guid><category>apache</category><category>apache2</category><category>certificado</category><category>cname</category><category>dns</category><category>dominio dinámico</category><category>dyndns</category><category>dynhost</category><category>https</category><category>mod_rewrite</category><category>nginx</category><category>no-ip</category><category>ovh</category><category>ssl</category><category>tls</category><category>vhost_alias</category><category>wildcard</category></item><item><title>Comprobar que no tenemos configurado Apache como un proxy abierto</title><link>https://karpoke.ignaciocano.com/2012/09/21/comprobar-que-no-tenemos-configurado-apache-como-un-proxy-abierto/</link><description>&lt;p&gt;Revistando &lt;em&gt;logs&lt;/em&gt; de Apache, he visto que tenía algunas entradas del
tipo:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
93.174.93.52 - - [18/Sep/2012:02:23:11 +0200] "GET http://myproxylists.com/my-http-headers HTTP/1.1" 404 1046 "-" "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Fri, 21 Sep 2012 16:53:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2012-09-21:/2012/09/21/comprobar-que-no-tenemos-configurado-apache-como-un-proxy-abierto/</guid><category>apache</category><category>proxy</category><category>telnet</category></item><item><title>Symfony en Ubuntu Lucid Lynx 10.04</title><link>https://karpoke.ignaciocano.com/2012/06/03/symfony-en-ubuntu-lucid-lynx-10-04/</link><description>&lt;p&gt;&lt;a href="http://www.symfony-project.org/" title="Symfony"&gt;Symfony&lt;/a&gt; es una &lt;em&gt;framework&lt;/em&gt; MVC escrito en PHP para el desarrollo
rápido de páginas web. Además, ofrece un conjunto de buenas prácticas
para desarrollar páginas más seguras y con un coste de mantenimiento
menor.&lt;/p&gt;
&lt;p&gt;Para que la instalación sea más segura, los ficheros de Symfony debería
estar fuera del &lt;code&gt;DocumentRoot …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Sun, 03 Jun 2012 03:59:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2012-06-03:/2012/06/03/symfony-en-ubuntu-lucid-lynx-10-04/</guid><category>10.04</category><category>apache</category><category>csrf</category><category>framework</category><category>lampp</category><category>mvc</category><category>mysql</category><category>php</category><category>symfony</category><category>ubuntu lucid lynx</category><category>xss</category></item><item><title>Benchmarking de un servidor web</title><link>https://karpoke.ignaciocano.com/2012/05/10/benchmarking-de-un-servidor-web/</link><description>&lt;p&gt;Con un sencillo comando podremos saber la carga que soporta nuestro
servidor web. Hay que tener cuidado contra qué servidor lo lanzamos y en
qué momento, porque puede que interfiera o impida el acceso a otros
usuarios.&lt;/p&gt;
&lt;p&gt;El comando es &lt;code&gt;ab&lt;/code&gt;, de &lt;em&gt;Apache Benchmarking&lt;/em&gt;, y permite multitud de
opciones, entre …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Thu, 10 May 2012 19:47:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2012-05-10:/2012/05/10/benchmarking-de-un-servidor-web/</guid><category>ab</category><category>apache</category><category>benchmarking</category><category>minería de datos</category></item><item><title>HTTP Strict Transport Security</title><link>https://karpoke.ignaciocano.com/2011/09/11/http-strict-transport-security/</link><description>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security" title="HTTP Strict Transport Security"&gt;HTTP Strict Transport Security&lt;/a&gt; (HSTS) es un mecanismo de seguridad
web donde el servidor exige que las conexiones se realicen únicamente
mediante conexiones seguras. El servidor informa de esta política de
seguridad utilizando la cabecera &lt;code&gt;Strict-Transport-Security&lt;/code&gt;, en donde
se especifica el periodo durante el cual las conexiones seguras son
obligatorias …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Sun, 11 Sep 2011 17:37:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-09-11:/2011/09/11/http-strict-transport-security/</guid><category>apache</category><category>cabeceras HTTP</category><category>hsts</category><category>http</category><category>https</category><category>man in the middle</category><category>mitm</category><category>mod_headers</category><category>robo de sesión</category><category>ssl</category></item><item><title>Denegación de servicio en Apache utilizando la cabecera Range</title><link>https://karpoke.ignaciocano.com/2011/08/31/denegacion-de-servicio-en-apache-utilizando-la-cabecera-range/</link><description>&lt;p&gt;Una &lt;a href="http://issues.apache.org/bugzilla/show_bug.cgi?id=51714" title="vulnerabilidad descubierta por _kingcope_"&gt;vulnerabilidad descubierta por &lt;em&gt;kingcope&lt;/em&gt;&lt;/a&gt; permite que los
servidores Apache vulnerables sean susceptibles de sufrir una denegación
de servicio.&lt;/p&gt;
&lt;p&gt;La vulnerabilidad se encuentra en el uso de la cabecera &lt;code&gt;Range&lt;/code&gt;. Esta
cabecera se utiliza para obtener sólo una parte de la página. Si se
solicitan varias partes además de pedir …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Wed, 31 Aug 2011 14:19:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-08-31:/2011/08/31/denegacion-de-servicio-en-apache-utilizando-la-cabecera-range/</guid><category>2.2.17</category><category>apache</category><category>cabeceras HTTP</category><category>denegación de servicio</category><category>dos</category><category>mod_headers</category><category>mod_rewrite</category><category>perl</category><category>range</category><category>requestheader</category><category>script</category><category>telnet</category></item><item><title>Evitando el hotlinking</title><link>https://karpoke.ignaciocano.com/2011/08/16/evitando-el-hotlinking/</link><description>&lt;p&gt;Si tenemos una página web que contiene imágenes, tarde o temprano,
alguien terminará mostrándolas en otro sitio, enlazándolas directamente
y utilizando nuestro ancho de banda. Vamos, lo que se conoce como
&lt;em&gt;hotlinking&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La siguiente &lt;a href="http://httpd.apache.org/docs/2.3/rewrite/access.html" title="técnica se basa en el valor de la variable HTTP_REFERER"&gt;técnica se basa en el valor de la variable
&lt;code&gt;HTTP_REFERER&lt;/code&gt;&lt;/a&gt;, la cual es opcional, por lo …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Tue, 16 Aug 2011 14:05:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-08-16:/2011/08/16/evitando-el-hotlinking/</guid><category>apache</category><category>hotlinking</category><category>HTTP_REFERER</category><category>mod_rewrite</category></item><item><title>SSH over HTTP-Proxy</title><link>https://karpoke.ignaciocano.com/2011/08/15/ssh-over-http-proxy/</link><description>&lt;p&gt;A veces, queremos poder navegar o chatear por Internet pero no queremos
que nadie pueda conocer, ni bloquear, las páginas que visitamos o espiar
nuestras conversaciones, bien porque porque estamos en el trabajo, la
universidad o en una red abierta. En la red a la que estamos conectados
puede que …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Mon, 15 Aug 2011 04:29:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-08-15:/2011/08/15/ssh-over-http-proxy/</guid><category>apache</category><category>corkscrew</category><category>htc</category><category>http</category><category>HTTP_PROXY</category><category>https</category><category>proxy</category><category>proxy http</category><category>proxy socks</category><category>proxytunnel</category><category>SOCKS</category><category>ssh</category><category>varnish</category></item><item><title>sslh, compartiendo el puerto 443</title><link>https://karpoke.ignaciocano.com/2011/07/30/sslh-compartiendo-el-puerto-443/</link><description>&lt;p&gt;Podemos tener varios motivos para tener escuchando nuestro servicio de SSH en
el puerto 443. Ya sea porque queremos evitarnos los continuos intentos de
conexión que sufrimos por tener el servicio escuchando en el puerto 22 o porque
desde donde estemos, ya sea en el trabajo o en un hotel …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Sat, 30 Jul 2011 19:21:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-07-30:/2011/07/30/sslh-compartiendo-el-puerto-443/</guid><category>apache</category><category>firewall</category><category>https</category><category>logcheck</category><category>puertos bien conocidos</category><category>ssh</category><category>ssl</category><category>sslh</category><category>ufw</category></item><item><title>Identificando los plugins de WordPress instalados</title><link>https://karpoke.ignaciocano.com/2011/06/20/identificando-los-plugins-de-wordpress-instalados/</link><description>&lt;p&gt;Hay un &lt;em&gt;script&lt;/em&gt; para &lt;code&gt;nmap&lt;/code&gt;, &lt;a href="http://seclists.org/nmap-dev/2011/q1/att-806/http-wp-plugins.nse" title="http-wp-plugins"&gt;http-wp-plugins&lt;/a&gt;, que permite &lt;a href="http://blog.alexos.com.br/?p=2302" title="detectar los complementos instalados en WordPress"&gt;detectar
los complementos instalados en WordPress&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dicho &lt;em&gt;script&lt;/em&gt; intenta acceder a los directorios de los complementos en
&lt;code&gt;wp-content/plugins/&lt;/code&gt; con la ayuda de un &lt;a href="http://seclists.org/nmap-dev/2011/q1/att-806/wp-plugins_lst_tar.gz" title="diccionario"&gt;diccionario&lt;/a&gt;. Si la
respuesta no es un error 404 interpreta que el directorio, y por tanto
el complemento …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nacho Cano</dc:creator><pubDate>Mon, 20 Jun 2011 20:47:00 +0200</pubDate><guid isPermaLink="false">tag:karpoke.ignaciocano.com,2011-06-20:/2011/06/20/identificando-los-plugins-de-wordpress-instalados/</guid><category>404</category><category>apache</category><category>escáner de vulnerabilidades</category><category>fingerprint</category><category>http-wp-plugins</category><category>nmap</category><category>plugin</category><category>script</category><category>seguridad por oscuridad</category><category>wordpress</category><category>wpfinger</category></item></channel></rss>